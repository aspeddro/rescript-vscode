// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");

function decodeDocstrings(item) {
  var match = Js_dict.get(item, "docstrings");
  if (match !== undefined) {
    if (!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean") {
      return [];
    } else if (Array.isArray(match)) {
      return match.map(function (s) {
                  if (!Array.isArray(s) && (s === null || typeof s !== "object") && typeof s !== "number" && typeof s !== "string" && typeof s !== "boolean") {
                    throw {
                          RE_EXN_ID: "Assert_failure",
                          _1: [
                            "Tools_Docgen.res",
                            64,
                            13
                          ],
                          Error: new Error()
                        };
                  }
                  if (typeof s === "string") {
                    return s;
                  }
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "Tools_Docgen.res",
                          64,
                          13
                        ],
                        Error: new Error()
                      };
                });
    } else {
      return [];
    }
  } else {
    return [];
  }
}

function decodeStringByField(item, field) {
  var match = Js_dict.get(item, field);
  if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean") && typeof match === "string") {
    return match;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Tools_Docgen.res",
          75,
          9
        ],
        Error: new Error()
      };
}

function decodeDepreacted(item) {
  var match = Js_dict.get(item, "deprecated");
  if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean" || typeof match !== "string")) {
    return match;
  }
  
}

function decodeDetail(detail) {
  if (!Array.isArray(detail) && (detail === null || typeof detail !== "object") && typeof detail !== "number" && typeof detail !== "string" && typeof detail !== "boolean") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Tools_Docgen.res",
            144,
            9
          ],
          Error: new Error()
        };
  }
  if (typeof detail === "object" && !Array.isArray(detail)) {
    var match = Js_dict.get(detail, "kind");
    var match$1 = Js_dict.get(detail, "items");
    if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean") && typeof match === "string" && match$1 !== undefined && !(!Array.isArray(match$1) && (match$1 === null || typeof match$1 !== "object") && typeof match$1 !== "number" && typeof match$1 !== "string" && typeof match$1 !== "boolean") && Array.isArray(match$1)) {
      switch (match) {
        case "record" :
            var items = match$1.map(function (field) {
                  if (!Array.isArray(field) && (field === null || typeof field !== "object") && typeof field !== "number" && typeof field !== "string" && typeof field !== "boolean") {
                    throw {
                          RE_EXN_ID: "Assert_failure",
                          _1: [
                            "Tools_Docgen.res",
                            104,
                            11
                          ],
                          Error: new Error()
                        };
                  }
                  if (typeof field === "object" && !Array.isArray(field)) {
                    var name = decodeStringByField(field, "name");
                    var docstrings = decodeDocstrings(field);
                    var signature = decodeStringByField(field, "signature");
                    var deprecated = decodeDepreacted(field);
                    var match = Js_dict.get(field, "optional");
                    var optional;
                    var exit = 0;
                    if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean" || typeof match !== "boolean")) {
                      optional = match;
                    } else {
                      exit = 1;
                    }
                    if (exit === 1) {
                      throw {
                            RE_EXN_ID: "Assert_failure",
                            _1: [
                              "Tools_Docgen.res",
                              98,
                              15
                            ],
                            Error: new Error()
                          };
                    }
                    return {
                            name: name,
                            docstrings: docstrings,
                            signature: signature,
                            optional: optional,
                            deprecated: deprecated
                          };
                  }
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "Tools_Docgen.res",
                          104,
                          11
                        ],
                        Error: new Error()
                      };
                });
            return {
                    kind: "record",
                    items: items
                  };
        case "variant" :
            var items$1 = match$1.map(function (field) {
                  if (!Array.isArray(field) && (field === null || typeof field !== "object") && typeof field !== "number" && typeof field !== "string" && typeof field !== "boolean") {
                    throw {
                          RE_EXN_ID: "Assert_failure",
                          _1: [
                            "Tools_Docgen.res",
                            123,
                            11
                          ],
                          Error: new Error()
                        };
                  }
                  if (typeof field === "object" && !Array.isArray(field)) {
                    var name = decodeStringByField(field, "name");
                    var docstrings = decodeDocstrings(field);
                    var signature = decodeStringByField(field, "signature");
                    var deprecated = decodeDepreacted(field);
                    return {
                            name: name,
                            docstrings: docstrings,
                            signature: signature,
                            deprecated: deprecated
                          };
                  }
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "Tools_Docgen.res",
                          123,
                          11
                        ],
                        Error: new Error()
                      };
                });
            return {
                    kind: "variant",
                    items: items$1
                  };
        default:
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "Tools_Docgen.res",
                  139,
                  13
                ],
                Error: new Error()
              };
      }
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Tools_Docgen.res",
            141,
            11
          ],
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Tools_Docgen.res",
          144,
          9
        ],
        Error: new Error()
      };
}

function decodeValue(item) {
  var id = decodeStringByField(item, "id");
  var signature = decodeStringByField(item, "signature");
  var name = decodeStringByField(item, "name");
  var deprecated = decodeDepreacted(item);
  var docstrings = decodeDocstrings(item);
  return {
          kind: "value",
          id: id,
          docstrings: docstrings,
          signature: signature,
          name: name,
          deprecated: deprecated
        };
}

function decodeType(item) {
  var id = decodeStringByField(item, "id");
  var signature = decodeStringByField(item, "signature");
  var name = decodeStringByField(item, "name");
  var deprecated = decodeDepreacted(item);
  var docstrings = decodeDocstrings(item);
  var field = Js_dict.get(item, "detail");
  var detail = field !== undefined ? decodeDetail(field) : undefined;
  return {
          kind: "type",
          id: id,
          docstrings: docstrings,
          signature: signature,
          name: name,
          deprecated: deprecated,
          detail: detail
        };
}

function decodeModuleAlias(item) {
  var id = decodeStringByField(item, "id");
  var name = decodeStringByField(item, "name");
  var docstrings = decodeDocstrings(item);
  var match = Js_dict.get(item, "items");
  var items;
  var exit = 0;
  if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean" || !Array.isArray(match))) {
    items = match.map(function (item) {
          return decodeItem(item);
        });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Tools_Docgen.res",
            175,
            9
          ],
          Error: new Error()
        };
  }
  return {
          kind: "moduleAlias",
          id: id,
          docstrings: docstrings,
          name: name,
          items: items
        };
}

function decodeModule(item) {
  var id = decodeStringByField(item, "id");
  var name = decodeStringByField(item, "name");
  var deprecated = decodeDepreacted(item);
  var docstrings = decodeDocstrings(item);
  var match = Js_dict.get(item, "items");
  var items;
  var exit = 0;
  if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean" || !Array.isArray(match))) {
    items = match.map(function (item) {
          return decodeItem(item);
        });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Tools_Docgen.res",
            187,
            9
          ],
          Error: new Error()
        };
  }
  return {
          kind: "module",
          id: id,
          docstrings: docstrings,
          deprecated: deprecated,
          name: name,
          items: items
        };
}

function decodeItem(item) {
  if (!Array.isArray(item) && (item === null || typeof item !== "object") && typeof item !== "number" && typeof item !== "string" && typeof item !== "boolean") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Tools_Docgen.res",
            206,
            9
          ],
          Error: new Error()
        };
  }
  if (typeof item === "object" && !Array.isArray(item)) {
    var match = Js_dict.get(item, "kind");
    if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean") && typeof match === "string") {
      switch (match) {
        case "module" :
            return decodeModule(item);
        case "moduleAlias" :
            return decodeModuleAlias(item);
        case "type" :
            return decodeType(item);
        case "value" :
            return decodeValue(item);
        default:
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "Tools_Docgen.res",
                  202,
                  13
                ],
                Error: new Error()
              };
      }
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Tools_Docgen.res",
            204,
            11
          ],
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Tools_Docgen.res",
          206,
          9
        ],
        Error: new Error()
      };
}

function decodeFromJson(json) {
  if (!Array.isArray(json) && (json === null || typeof json !== "object") && typeof json !== "number" && typeof json !== "string" && typeof json !== "boolean") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Tools_Docgen.res",
            236,
            9
          ],
          Error: new Error()
        };
  }
  if (typeof json === "object" && !Array.isArray(json)) {
    var name = decodeStringByField(json, "name");
    var deprecated = decodeDepreacted(json);
    var docstrings = decodeDocstrings(json);
    var match = Js_dict.get(json, "items");
    var items;
    var exit = 0;
    if (match !== undefined && !(!Array.isArray(match) && (match === null || typeof match !== "object") && typeof match !== "number" && typeof match !== "string" && typeof match !== "boolean" || !Array.isArray(match))) {
      items = match.map(function (item) {
            return decodeItem(item);
          });
    } else {
      exit = 1;
    }
    if (exit === 1) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Tools_Docgen.res",
              230,
              13
            ],
            Error: new Error()
          };
    }
    return {
            name: name,
            deprecated: deprecated,
            docstrings: docstrings,
            items: items
          };
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Tools_Docgen.res",
          236,
          9
        ],
        Error: new Error()
      };
}

exports.decodeValue = decodeValue;
exports.decodeType = decodeType;
exports.decodeModule = decodeModule;
exports.decodeModuleAlias = decodeModuleAlias;
exports.decodeItem = decodeItem;
exports.decodeFromJson = decodeFromJson;
/* No side effect */
